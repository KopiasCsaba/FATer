/**
 *
 * Copyright 2016 Kopi√°s Csaba [ http://kopiascsaba.hu ]
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

/*
 * FaterMain.java
 *
 * Created on Jun 2, 2010, 12:38:44 PM
 */
package fater;

import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;

/**
 *
 * @author meta
 */
public class FaterMain extends javax.swing.JFrame implements WindowListener {

    final static int MODE_BEFORE = 0;
    final static int MODE_WRITE = 1;
    final static int MODE_WAIT = 2;
    final static int MODE_READ = 3;
    int mode = MODE_BEFORE;
    WorkerThread wt;

    private StringBuffer logBuffer;
    private final SimpleDateFormat sdf;

    /**
     * Creates new form FaterMain
     */
    public FaterMain() {
        sdf = new SimpleDateFormat("HH:mm:ss");

        initComponents();
        this.setVisible(true);
        logBuffer = new StringBuffer();
        log("Up, and running");
        calcSizes();
        updateFreeSpace();

        HTMLEditorKit htmlEditorKit = new HTMLEditorKit();
        HTMLDocument htmlDocument = (HTMLDocument) htmlEditorKit.createDefaultDocument();

        try {
//	htmlDocument.setBase(this.getClass().getResource(("/res/help.html")));
            helpenPane.read(this.getClass().getResourceAsStream("/helpen.html"), htmlDocument);
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        homePanel = new javax.swing.JPanel();
        exitButton = new javax.swing.JButton();
        workButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        logArea = new javax.swing.JTextArea();
        configPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nofLabel = new javax.swing.JLabel();
        fileSize = new javax.swing.JTextField();
        numberOfFiles = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        targetDir = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        countLabel = new javax.swing.JLabel();
        freeLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        helpenPane = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FATer");

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        workButton.setText("Let's work");
        workButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                workButtonActionPerformed(evt);
            }
        });

        progressBar.setStringPainted(true);

        logArea.setColumns(20);
        logArea.setEditable(false);
        logArea.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        logArea.setRows(5);
        logArea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setViewportView(logArea);

        configPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Configuration"));

        jLabel1.setText("Size of the files:");

        nofLabel.setText("Number of files:");

        fileSize.setText("10");
        fileSize.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fileSizeKeyReleased(evt);
            }
        });

        numberOfFiles.setText("10000");
        numberOfFiles.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                numberOfFilesKeyReleased(evt);
            }
        });

        jLabel4.setText("Kbyte");

        jLabel5.setText("Target directory:");

        targetDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetDirActionPerformed(evt);
            }
        });
        targetDir.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                targetDirPropertyChange(evt);
            }
        });
        targetDir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                targetDirKeyReleased(evt);
            }
        });

        browseButton.setText("...");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        countLabel.setText("= 4 Gbyte");

        freeLabel.setText("Free space");

        javax.swing.GroupLayout configPanelLayout = new javax.swing.GroupLayout(configPanel);
        configPanel.setLayout(configPanelLayout);
        configPanelLayout.setHorizontalGroup(
            configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, configPanelLayout.createSequentialGroup()
                        .addGroup(configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nofLabel)
                            .addComponent(jLabel5))
                        .addGroup(configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(configPanelLayout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(fileSize, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(numberOfFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(countLabel)
                                    .addComponent(jLabel4)))
                            .addGroup(configPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(targetDir, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(browseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(freeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );
        configPanelLayout.setVerticalGroup(
            configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fileSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nofLabel)
                    .addComponent(numberOfFiles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(targetDir, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(freeLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout homePanelLayout = new javax.swing.GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
                    .addComponent(configPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addComponent(workButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exitButton))
                    .addComponent(progressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE))
                .addContainerGap())
        );

        homePanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {exitButton, workButton});

        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(configPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitButton)
                    .addComponent(workButton))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Home", homePanel);

        helpenPane.setContentType("text/html"); // NOI18N
        helpenPane.setEditable(false);
        jScrollPane2.setViewportView(helpenPane);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Help", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed

        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed

        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        fc.setMultiSelectionEnabled(false);
        fc.setAcceptAllFileFilterUsed(false);

        fc.setCurrentDirectory(new File(targetDir.getText()));
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            targetDir.setText(fc.getSelectedFile().getPath());
        }

        updateFreeSpace();

    }//GEN-LAST:event_browseButtonActionPerformed

    public int getMode() {
        return mode;
    }

    public void setMode(int mode) {

        switch (mode) {
            case MODE_BEFORE:
                workButton.setEnabled(true);
                numberOfFiles.setEnabled(true);
                fileSize.setEnabled(true);
                workButton.setText("Let's work");
                break;
            case MODE_WRITE:
                wt = new WorkerThread(this);
                wt.start();
                workButton.setEnabled(false);
                numberOfFiles.setEnabled(false);
                fileSize.setEnabled(false);
                workButton.setText("Let's work");
                break;
            case MODE_WAIT:
                workButton.setEnabled(true);
                numberOfFiles.setEnabled(false);
                fileSize.setEnabled(false);
                workButton.setText("Continue");
                break;
            case MODE_READ:
                wt.setMode(WorkerThread.MODE_READ);
                workButton.setEnabled(false);
                numberOfFiles.setEnabled(false);
                fileSize.setEnabled(false);
                workButton.setText("Continue");
                break;
            default:
                break;
        }
        this.mode = mode;
    }

    private void workButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_workButtonActionPerformed
        if (mode == MODE_BEFORE) {
            setMode(MODE_WRITE);
        } else if (mode == MODE_WAIT) {
            setMode(MODE_READ);
        }
    }//GEN-LAST:event_workButtonActionPerformed

    private void fileSizeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileSizeKeyReleased
        calcSizes();
    }//GEN-LAST:event_fileSizeKeyReleased

    private void numberOfFilesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numberOfFilesKeyReleased
        calcSizes();
    }//GEN-LAST:event_numberOfFilesKeyReleased

    private void targetDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetDirActionPerformed
        updateFreeSpace();
    }//GEN-LAST:event_targetDirActionPerformed

    private void targetDirKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_targetDirKeyReleased
        updateFreeSpace();
    }//GEN-LAST:event_targetDirKeyReleased

    private void targetDirPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_targetDirPropertyChange
        updateFreeSpace();
    }//GEN-LAST:event_targetDirPropertyChange

    /**
     * Updates free space in the gui
     */
    public void updateFreeSpace() {
        if (!new File(targetDir.getText()).isDirectory()) {
            freeLabel.setText("Not a directory.");
        } else {
            freeLabel.setText(formatBytes(getFreeSpace()) + " free");
        }
    }

    /**
     * Returns the available free space on the selected folder's partition in
     * bytes
     *
     * @return bytes
     */
    public long getFreeSpace() {
        return new File(targetDir.getText()).getUsableSpace();
    }

    /**
     * Calculates the occupied size by the generated files...
     */
    public void calcSizes() {
        long q = 0, s = 0;
        try {
            q = Long.parseLong(numberOfFiles.getText());
            s = Long.parseLong(fileSize.getText());
        } catch (Exception e) {
            countLabel.setText(":-)");
            return;
        }

        long size = q * s * 1024;

        if (size > 6443505418240l) { // khm... ooo... :)
            countLabel.setText("Too big :-)");
        } else {
            countLabel.setText("= " + formatBytes(size));
        }

    }

    /**
     * Formats bytes to human readable format
     *
     * @param size
     * @return
     */
    public String formatBytes(long size) {

        String ret = "#";
        if (size < 1024) {
            ret = size + " byte";
        }
        if (1024 <= size && size < Math.pow(1024, 2)) {
            ret = Math.round(size / 1024) + " Kbyte";
        }
        if (Math.pow(1024, 2) <= size && size < Math.pow(1024, 3)) {
            ret = round(size / Math.pow(1024, 2), 2) + " Mbyte";
        }
        if (Math.pow(1024, 3) <= size) {
            ret = round(size / Math.pow(1024, 3), 2) + " Gbyte";
        }
        return ret;

    }

    /**
     * Rounding
     *
     * @param number number
     * @param digits digits
     * @return
     */
    public static double round(double number, int digits) {
        int temp = (int) ((number * Math.pow(10, digits)));
        return (((double) temp) / Math.pow(10, digits));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JPanel configPanel;
    private javax.swing.JLabel countLabel;
    private javax.swing.JButton exitButton;
    public javax.swing.JTextField fileSize;
    private javax.swing.JLabel freeLabel;
    private javax.swing.JEditorPane helpenPane;
    private javax.swing.JPanel homePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea logArea;
    private javax.swing.JLabel nofLabel;
    public javax.swing.JTextField numberOfFiles;
    public javax.swing.JProgressBar progressBar;
    public javax.swing.JTextField targetDir;
    private javax.swing.JButton workButton;
    // End of variables declaration//GEN-END:variables

    public void windowOpened(WindowEvent we) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowClosing(WindowEvent we) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowClosed(WindowEvent we) {
        System.exit(0);
    }

    public void windowIconified(WindowEvent we) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowDeiconified(WindowEvent we) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowActivated(WindowEvent we) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowDeactivated(WindowEvent we) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    /**
     * Logging helper
     *
     * @param log
     */
    public void log(String log) {

        logBuffer.insert(0, log);
        logBuffer.insert(0, "[" + sdf.format(new Date()) + "] ");
        logBuffer.insert(0, "\n");
        logArea.setText(logBuffer.toString().trim());
    }

    public void logClear() {
        logBuffer.setLength(0);
        logArea.setText(logBuffer.toString().trim());

    }
}
